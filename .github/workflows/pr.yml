name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Comment PR info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number,
            });
            
            const comment = `## 🔍 Pull Request Analysis
            
            **Base Branch:** \`${pr.data.base.ref}\`
            **Head Branch:** \`${pr.data.head.ref}\`
            **Files Changed:** ${pr.data.changed_files}
            **Additions:** +${pr.data.additions}
            **Deletions:** -${pr.data.deletions}
            
            ## 🚀 Automated Checks
            
            The following checks will run automatically:
            - ✅ Code linting and formatting
            - ✅ TypeScript type checking  
            - ✅ End-to-end tests
            - ✅ Lighthouse performance audit
            - ✅ Security vulnerability scan
            
            Please wait for all checks to complete before requesting review.`;
            
            github.rest.issues.createComment({
              issue_number: number,
              owner,
              repo,
              body: comment
            });

  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for package.json changes
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "package\.json\|package-lock\.json"; then
            echo "📦 Package dependencies have changed"
            echo "dependency_changes=true" >> $GITHUB_OUTPUT
          else
            echo "dependency_changes=false" >> $GITHUB_OUTPUT
          fi
        id: deps

      - name: Check for large files
        run: |
          large_files=$(find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" || true)
          if [ -n "$large_files" ]; then
            echo "⚠️ Large files detected:"
            echo "$large_files"
            echo "Please ensure these are necessary and consider using Git LFS for binary assets."
          fi

      - name: Lint staged changes
        run: |
          changed_files=$(git diff --name-only --diff-filter=ACM origin/main...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          if [ -n "$changed_files" ]; then
            echo "Linting changed files: $changed_files"
            npx eslint $changed_files
          else
            echo "No JavaScript/TypeScript files changed"
          fi

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start development server
        run: npm run dev &
        
      - name: Wait for server
        run: npx wait-on http://localhost:5173 --timeout 60000

      - name: Run visual regression tests
        run: |
          # Take screenshots of key pages
          npx playwright test --project=chromium --grep "should load the homepage|should show the hero section"

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-diffs
          path: test-results/
          retention-days: 7

  performance-check:
    name: Performance Impact Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PR version
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "📊 Bundle Analysis for PR" > bundle-analysis.txt
          echo "=========================" >> bundle-analysis.txt
          du -sh dist/ >> bundle-analysis.txt
          echo "" >> bundle-analysis.txt
          echo "Largest files:" >> bundle-analysis.txt
          find dist/ -type f -exec du -h {} + | sort -rh | head -10 >> bundle-analysis.txt

      - name: Install Playwright
        run: npx playwright install chromium --with-deps

      - name: Start dev server and run lighthouse
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 60000
          npm run test:lighthouse

      - name: Comment performance results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read bundle analysis
            let bundleInfo = '';
            try {
              bundleInfo = fs.readFileSync('bundle-analysis.txt', 'utf8');
            } catch (e) {
              bundleInfo = 'Bundle analysis not available';
            }
            
            // Find latest lighthouse report
            const reportsDir = 'lighthouse-reports';
            let lighthouseInfo = 'Lighthouse report not available';
            
            if (fs.existsSync(reportsDir)) {
              const files = fs.readdirSync(reportsDir);
              const jsonFiles = files.filter(f => f.includes('performance-metrics') && f.endsWith('.json'));
              
              if (jsonFiles.length > 0) {
                const latestReport = jsonFiles[jsonFiles.length - 1];
                const reportData = JSON.parse(fs.readFileSync(path.join(reportsDir, latestReport), 'utf8'));
                
                lighthouseInfo = `
            **Performance Scores:**
            - First Contentful Paint: ${reportData.scores.firstContentfulPaint}
            - DOM Content Loaded: ${reportData.scores.domContentLoaded}  
            - Resource Count: ${reportData.scores.resourceCount} (${reportData.metrics.totalResources} resources)
            - Total Resource Size: ${(reportData.metrics.totalResourceSize / 1024 / 1024).toFixed(2)} MB
                `;
              }
            }
            
            const comment = `## 📊 Performance Impact Analysis
            
            ### Bundle Size
            \`\`\`
            ${bundleInfo}
            \`\`\`
            
            ### Lighthouse Performance
            ${lighthouseInfo}
            
            ### Recommendations
            - Monitor resource count (currently showing as needs improvement)
            - Consider code splitting for large bundles
            - Optimize images and assets
            `;
            
            const { owner, repo, number } = context.issue;
            github.rest.issues.createComment({
              issue_number: number,
              owner,
              repo,
              body: comment
            });

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pr-performance-report
          path: |
            lighthouse-reports/
            bundle-analysis.txt
          retention-days: 7