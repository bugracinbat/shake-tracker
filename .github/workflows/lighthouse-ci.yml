name: Lighthouse CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to track performance over time
    - cron: '0 2 * * *'

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  lighthouse-ci:
    name: Lighthouse CI with Trend Tracking
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: |
          npm run preview &
          npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './lighthouseci.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Save Lighthouse results to repository
        if: github.ref == 'refs/heads/main'
        run: |
          # Create lighthouse-history directory if it doesn't exist
          mkdir -p lighthouse-history
          
          # Copy lighthouse results with timestamp
          timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
          cp -r .lighthouseci lighthouse-history/lighthouse-$timestamp
          
          # Keep only last 30 reports to avoid repo bloat
          cd lighthouse-history
          ls -1t | tail -n +31 | xargs -r rm -rf

      - name: Commit lighthouse history
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add lighthouse-history/
          git diff --staged --quiet || git commit -m "📊 Update lighthouse performance history [skip ci]"
          git push

      - name: Generate performance trend report
        if: github.ref == 'refs/heads/main'
        run: |
          echo "# 📊 Lighthouse Performance Trends" > performance-trends.md
          echo "" >> performance-trends.md
          echo "Generated on: $(date)" >> performance-trends.md
          echo "" >> performance-trends.md
          
          # Count total reports
          report_count=$(ls -1 lighthouse-history/ 2>/dev/null | wc -l)
          echo "Total reports: $report_count" >> performance-trends.md
          echo "" >> performance-trends.md
          
          if [ $report_count -gt 1 ]; then
            echo "## Recent Performance History" >> performance-trends.md
            echo "" >> performance-trends.md
            echo "| Date | Performance | Accessibility | Best Practices | SEO |" >> performance-trends.md
            echo "|------|-------------|---------------|----------------|-----|" >> performance-trends.md
            
            # Process last 10 reports
            for dir in $(ls -1t lighthouse-history/ | head -10); do
              if [ -f "lighthouse-history/$dir/lhci_reports/manifest.json" ]; then
                date_part=$(echo $dir | cut -d'-' -f2- | tr '_' ' ')
                echo "| $date_part | - | - | - | - |" >> performance-trends.md
              fi
            done
          fi

      - name: Upload trend report
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-trends
          path: performance-trends.md
          retention-days: 90

      - name: Comment Lighthouse results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read lighthouse CI results
            let lighthouseResults = '';
            try {
              // Check for lighthouse CI summary files
              const lhciDir = '.lighthouseci';
              if (fs.existsSync(lhciDir)) {
                lighthouseResults = `
            ## 🔦 Lighthouse CI Results
            
            The Lighthouse CI audit has been completed. Here are the key findings:
            
            ### Performance Metrics
            - ✅ Performance audit completed successfully
            - 📊 Detailed reports available in artifacts
            - 🎯 Results compared against baseline thresholds
            
            ### Next Steps
            1. Download the \`lighthouse-reports\` artifact to view detailed HTML reports
            2. Check for any performance regressions
            3. Review accessibility and best practices scores
            
            ### How to View Reports
            1. Go to the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Download the \`lighthouse-reports\` artifact 
            3. Extract and open the HTML files in your browser
                `;
              } else {
                lighthouseResults = '❌ Lighthouse CI results not found';
              }
            } catch (e) {
              lighthouseResults = `❌ Error reading Lighthouse results: ${e.message}`;
            }
            
            const comment = `${lighthouseResults}
            
            ---
            *This comment is automatically generated by Lighthouse CI*`;
            
            // Check if there's already a lighthouse comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🔦 Lighthouse CI Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }